`timescale 1ns / 1ps

module top_tb;

    // Inputs
    reg clock;
    reg reset;
    reg rx;
    
    // Outputs
    wire tx;
    
    // Instantiate the top module
    top uut (
        .clock(clock),
        .reset(reset),
        .rx(rx),
        
        .tx(tx)
    );
    
initial
    begin
    clock = 1'd0;
    reset = 1'd1;
    rx = 1'd1;
    #5000 reset = 1'd0;
    #20 reset = 1'd1;
    
    // отправляем 2
    #18000 rx = 1'd0;
    
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
     // отправляем 3
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    // отправляем SPACE
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    // отправляем 2
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    // отправляем 3
    #8680 rx = 1'd0; 
    
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    // отправляем SPACE
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    // отправляем +
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    ///////////////////////////////////////////////
    // отправляем 2
    #380000 rx = 1'd0;
    
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
     // отправляем 3
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    // отправляем SPACE
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    // отправляем 2
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    // отправляем 3
    #8680 rx = 1'd0; 
    
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    // отправляем SPACE
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    // отправляем +
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    ///////////////////////////////////////////
    // отправляем 2
    #380000 rx = 1'd0;
    
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    // отправляем SPACE
    #8680 rx = 1'd0;
        
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
        
    #8680 rx = 1'd1;
    
    // отправляем 3
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
    
    // отправляем SPACE
    #8680 rx = 1'd0;
        
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
        
    #8680 rx = 1'd1;
    
    // отправляем *
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd1;
    #8680 rx = 1'd0;
    #8680 rx = 1'd0;
    
    #8680 rx = 1'd1;
   
    #100000000 $finish;
    end
    
    always
    begin
    #5 clock <= ~clock;
    end
    
endmodule

